trigger:
- master

variables:
  buildConfiguration: 'Release'
  releaseBranch: 'refs/heads/master'
  nuGetArtifactName: 'NuGet Packages'

jobs:
- job: Build
  strategy:
    matrix:
      Windows:
        imageName: 'windows-2019'
      Linux:
        imageName: 'ubuntu-latest'
      macOS:
        imageName: 'macOS-latest'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UseDotNet@2
    displayName: Install .NET Core 2.0 SDK
    inputs:
      version: '2.0.x'

  - task: UseDotNet@2
    displayName: Install .NET Core 2.1 SDK
    inputs:
      version: '2.1.x'

  - task: UseDotNet@2
    displayName: Install .NET Core 2.2 SDK
    inputs:
      version: '2.2.x'

  - task: UseDotNet@2
    displayName: Install .NET Core 3.0 SDK
    inputs:
      version: '3.0.x'

  - task: UseDotNet@2
    displayName: Install .NET Core 3.1 SDK
    inputs:
      version: '3.1.x'

  - task: UseDotNet@2
    displayName: Install .NET 5.0 SDK
    inputs:
      version: '5.0.x'

  - task: PowerShell@2
    displayName: Build / Test / Pack
    inputs:
      filePath: 'build/build.ps1'
      arguments: '--configuration $(buildConfiguration) --ArtifactsDirectory $(Build.ArtifactStagingDirectory) --no-logo'
      
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'
    condition: always()

  # Only publish Windows artifacts since only Windows supports a full build.
  # The Publish job will not run if any OS fails building.
  - task: PublishBuildArtifacts@1
    displayName: Publish NuGet Package Artifacts (Windows)
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(nuGetArtifactName)'
    condition: |
      and
      (
        succeeded(),
        eq(variables['build.sourceBranch'], variables['releaseBranch']),
        eq(variables['system.pullrequest.isfork'], false),
        eq(variables['Agent.OS'], 'Windows_NT')
      )

- job: Publish
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['build.sourceBranch'], variables['releaseBranch']),
      eq(variables['system.pullrequest.isfork'], false)
    )
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: Download NuGet Package Artifacts
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '$(nuGetArtifactName)'
      downloadPath: '$(System.ArtifactsDirectory)'
  - task: NuGetCommand@2
    displayName: Push to NuGet
    inputs:
      command: 'push'
      packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'NuGet'
